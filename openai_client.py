import asyncio
import base64
from openai import AsyncOpenAI
from config import Config

class OpenAIClient:
    def __init__(self):
        # v2 API “Ø—à—ñ–Ω –¥“±—Ä—ã—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.client = AsyncOpenAI(
            api_key=Config.OPENAI_API_KEY
        )
        self.assistant_id = Config.OPENAI_ASSISTANT_ID
        self.vector_store_id = Config.VECTOR_STORE_ID
    
    async def create_thread(self):
        """–ñ–∞“£–∞ thread –∂–∞—Å–∞—É"""
        try:
            # v2 API header-–º–µ–Ω
            thread = await self.client.beta.threads.create(
                extra_headers={"OpenAI-Beta": "assistants=v2"}
            )
            print(f"‚úÖ Thread –∂–∞—Å–∞–ª–¥—ã: {thread.id}")
            return thread.id
        except Exception as e:
            print(f"‚ùå Thread –∂–∞—Å–∞—É “õ–∞—Ç–µ—Å—ñ: {e}")
            # –£–∞“õ—ã—Ç—à–∞ thread ID “õ–∞–π—Ç–∞—Ä—É (offline —Ä–µ–∂–∏–º)
            return f"temp_thread_{abs(hash(str(e))) % 10000}"
    
    async def send_message(self, thread_id, message, image_base64=None):
        """–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"""
        try:
            # –ï–≥–µ—Ä temp thread –±–æ–ª—Å–∞, –Ω–∞“õ—Ç—ã thread –∂–∞—Å–∞—É
            if thread_id.startswith("temp_thread_"):
                print("üîÑ –ù–∞“õ—Ç—ã thread –∂–∞—Å–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...")
                real_thread_id = await self.create_thread()
                if not real_thread_id.startswith("temp_thread_"):
                    thread_id = real_thread_id
                else:
                    return "OpenAI –±–∞–π–ª–∞–Ω—ã—Å—ã –∂–æ“õ. API Key –º–µ–Ω Assistant ID —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑."
            
            # –•–∞–±–∞—Ä–ª–∞–º–∞ “õ“±—Ä–∞–º—ã–Ω –¥–∞–π—ã–Ω–¥–∞—É
            content = []
            
            if image_base64:
                content.append({
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{image_base64}"
                    }
                })
            
            content.append({
                "type": "text",
                "text": message
            })
            
            # –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã thread-“õ–∞ “õ–æ—Å—É (v2 header-–º–µ–Ω)
            await self.client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=content,
                extra_headers={"OpenAI-Beta": "assistants=v2"}
            )
            
            # Run –∂–∞—Å–∞—É (v2 header-–º–µ–Ω)
            run = await self.client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=self.assistant_id,
                extra_headers={"OpenAI-Beta": "assistants=v2"}
            )
            
            # –ñ–∞—É–∞–ø—Ç—ã –∫“Ø—Ç—É
            max_attempts = 30  # 30 —Å–µ–∫—É–Ω–¥ –∫“Ø—Ç—É
            attempt = 0
            
            while attempt < max_attempts:
                run_status = await self.client.beta.threads.runs.retrieve(
                    thread_id=thread_id,
                    run_id=run.id,
                    extra_headers={"OpenAI-Beta": "assistants=v2"}
                )
                
                if run_status.status == 'completed':
                    break
                elif run_status.status in ['failed', 'cancelled', 'expired']:
                    error_msg = f"Run failed with status: {run_status.status}"
                    if hasattr(run_status, 'last_error') and run_status.last_error:
                        error_msg += f" - {run_status.last_error}"
                    print(f"‚ùå Run “õ–∞—Ç–µ—Å—ñ: {error_msg}")
                    return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Å“±—Ä–∞“õ—Ç—ã ”©“£–¥–µ—É–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã."
                elif run_status.status == 'requires_action':
                    # Tool calls –±–æ–ª—Å–∞, –æ–ª–∞—Ä–º–µ–Ω –∂“±–º—ã—Å –∂–∞—Å–∞—É –∫–µ—Ä–µ–∫
                    print("‚ö†Ô∏è Tool action —Ç–∞–ª–∞–ø –µ—Ç—ñ–ª—É–¥–µ")
                    await asyncio.sleep(2)
                else:
                    # in_progress, queued —Å—Ç–∞—Ç—É—Å—Ç–∞—Ä—ã
                    await asyncio.sleep(1)
                
                attempt += 1
            
            if attempt >= max_attempts:
                return "–°“±—Ä–∞“õ—Ç—ã ”©“£–¥–µ—É —Ç—ã–º “±–∑–∞“õ —É–∞“õ—ã—Ç –∞–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑."
            
            # –ñ–∞—É–∞–ø—Ç—ã –∞–ª—É (v2 header-–º–µ–Ω)
            messages = await self.client.beta.threads.messages.list(
                thread_id=thread_id,
                limit=1,
                extra_headers={"OpenAI-Beta": "assistants=v2"}
            )
            
            if messages.data:
                # –ñ–∞—É–∞–ø—Ç—ã –∞–ª—É
                content = messages.data[0].content[0]
                if hasattr(content, 'text'):
                    return content.text.value
                else:
                    return str(content)
            else:
                return "–ñ–∞—É–∞–ø –∞–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã."
                
        except Exception as e:
            print(f"OpenAI API “õ–∞—Ç–µ—Å—ñ: {e}")
            
            # –ù–∞“õ—Ç—ã “õ–∞—Ç–µ —Ç–µ–∫—Å–µ—Ä—É
            error_str = str(e).lower()
            
            if "assistant" in error_str and ("not found" in error_str or "does not exist" in error_str):
                return "‚ùå Assistant ID –¥“±—Ä—ã—Å –µ–º–µ—Å. OpenAI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Å—ã–Ω–¥–∞ Assistant –∂–∞—Å–∞–ø, ID-–¥—ã .env —Ñ–∞–π–ª—ã–Ω–∞ “õ–æ–π—ã“£—ã–∑."
            
            if "thread" in error_str and ("not found" in error_str or "does not exist" in error_str):
                return "‚ùå Thread “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ë–æ—Ç—Ç—ã “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—ã“£—ã–∑ (/start)."
            
            if "unauthorized" in error_str or "api_key" in error_str or "authentication" in error_str:
                return "‚ùå API key “õ–∞—Ç–µ—Å—ñ. OpenAI API key –¥“±—Ä—ã—Å –µ–º–µ—Å. .env —Ñ–∞–π–ª—ã–Ω–¥–∞“ì—ã OPENAI_API_KEY —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑."
            
            if "rate limit" in error_str or "quota" in error_str:
                return "‚ùå OpenAI –ª–∏–º–∏—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑."
            
            if "v1 assistants api has been deprecated" in error_str:
                return "‚ùå OpenAI –∫—ñ—Ç–∞–ø—Ö–∞–Ω–∞—Å—ã –µ—Å–∫—ñ—Ä–≥–µ–Ω. 'pip install --upgrade openai' –∫–æ–º–∞–Ω–¥–∞–Ω—ã—Å—ã–Ω –æ—Ä—ã–Ω–¥–∞“£—ã–∑."
            
            return f"–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {str(e)[:100]}..."
    
    async def test_connection(self):
        """OpenAI –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—É"""
        try:
            # Assistant –∞–ª—É –∞—Ä“õ—ã–ª—ã –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã —Ç–µ–∫—Å–µ—Ä—É
            assistant = await self.client.beta.assistants.retrieve(
                assistant_id=self.assistant_id,
                extra_headers={"OpenAI-Beta": "assistants=v2"}
            )
            print(f"‚úÖ Assistant —Ç–∞–±—ã–ª–¥—ã: {assistant.name}")
            return True
        except Exception as e:
            print(f"‚ùå OpenAI –±–∞–π–ª–∞–Ω—ã—Å—ã –∂–æ“õ: {e}")
            return False
