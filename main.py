import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import Config
from openai_client import OpenAIClient
from utils import SessionManager, resize_image

# –õ–æ–≥—Ç–∞—É –æ—Ä–Ω–∞—Ç—É
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Global –æ–±—ä–µ–∫—Ç—Ç–µ—Ä
session_manager = SessionManager()
openai_client = OpenAIClient()

class HalalBot:
    def __init__(self):
        self.application = None
    
    def get_welcome_message(self, language='kk'):
        """“ö–æ—à –∫–µ–ª—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã"""
        messages = {
            'kk': """üåü –•–∞–ª–∞–ª –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç AI –ë–æ—Ç—ã-–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!

–ú–µ–Ω —Å—ñ–∑–≥–µ –º—ã–Ω–∞–¥–∞–π –º”ô—Å–µ–ª–µ–ª–µ—Ä–¥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω:
‚Ä¢ “ö–ú–î–ë —Ö–∞–ª–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã–Ω –∞–ª“ì–∞–Ω –º–µ–∫–µ–º–µ–ª–µ—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç
‚Ä¢ –ï “õ–æ—Å–ø–∞–ª–∞—Ä—ã–Ω—ã“£ —Ö–∞–ª–∞–ª/—Ö–∞—Ä–∞–º –º”ô—Ä—Ç–µ–±–µ—Å—ñ —Ç—É—Ä–∞–ª—ã
‚Ä¢ ”®–Ω—ñ–º “õ“±—Ä–∞–º—ã–Ω —Å—É—Ä–µ—Ç –±–æ–π—ã–Ω—à–∞ —Ç–∞–ª–¥–∞—É

**–ü–∞–π–¥–∞–ª–∞–Ω—É:**
‚Ä¢ –ú–µ–∫–µ–º–µ –∞—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑ - —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–∞—Ä-–∂–æ“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–Ω
‚Ä¢ –ï “õ–æ—Å–ø–∞—Å—ã–Ω—ã“£ –∫–æ–¥—ã–Ω –Ω–µ–º–µ—Å–µ –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã“£—ã–∑ - –º”ô—Ä—Ç–µ–±–µ—Å—ñ–Ω –∞–π—Ç–∞–º—ã–Ω
‚Ä¢ ”®–Ω—ñ–º —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ - “õ“±—Ä–∞–º—ã–Ω —Ç–∞–ª–¥–∞–ø –±–µ—Ä–µ–º

**–¢—ñ–ª –∞—É—ã—Å—Ç—ã—Ä—É:** /language
**–ö”©–º–µ–∫:** /help

–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ —Å—É—Ä–µ—Ç –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!""",
            
            'ru': """üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–∞–ª—è–ª –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç AI –ë–æ—Ç!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö:
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö —Å —Ö–∞–ª—è–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º “ö–ú–î–ë
‚Ä¢ –°—Ç–∞—Ç—É—Å —Ö–∞–ª—è–ª—å/—Ö–∞—Ä–∞–º –ø–∏—â–µ–≤—ã—Ö –¥–æ–±–∞–≤–æ–∫
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—é –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–∫–∏ - —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å—Ç–∞—Ç—É—Å–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–∞–≤

**–°–º–µ–Ω–∞ —è–∑—ã–∫–∞:** /language
**–ü–æ–º–æ—â—å:** /help

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!""",
            
            'en': """üåü Welcome to Halal Certificate AI Bot!

I can help you with the following issues:
‚Ä¢ Information about organizations with “ö–ú–î–ë halal certificate
‚Ä¢ Halal/haram status of food additives
‚Ä¢ Product composition analysis by photo

**Usage:**
‚Ä¢ Write organization name - I'll check certificate status
‚Ä¢ Write additive code or name - I'll tell about status
‚Ä¢ Send product photo - I'll analyze composition

**Language change:** /language
**Help:** /help

Write your question or send a photo!"""
        }
        return messages.get(language, messages['kk'])
    
    def get_language_selection(self):
        """–¢—ñ–ª —Ç–∞“£–¥–∞—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã"""
        return """üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:

/kk - “ö–∞–∑–∞“õ—à–∞ üá∞üáø
/ru - –†—É—Å—Å–∫–∏–π üá∑üá∫  
/en - English üá∫üá∏

–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω “õ–∞–ª—ã–ø—Ç—ã —Ä–µ–∂–∏–º–¥–µ –∂“±–º—ã—Å –∂–∞—Å–∞–π –∞–ª–∞—Å—ã–∑."""
    
    def get_help_message(self, language='kk'):
        """–ö”©–º–µ–∫ —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã"""
        messages = {
            'kk': """‚ÑπÔ∏è **–ë–æ—Ç —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç**

**–ú“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ:**
‚Ä¢ –ú–µ–∫–µ–º–µ–ª–µ—Ä–¥—ñ“£ “ö–ú–î–ë —Ö–∞–ª–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–∞—Ä-–∂–æ“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
‚Ä¢ –ï “õ–æ—Å–ø–∞–ª–∞—Ä—ã–Ω—ã“£ —Ö–∞–ª–∞–ª/—Ö–∞—Ä–∞–º –º”ô—Ä—Ç–µ–±–µ—Å—ñ–Ω –±—ñ–ª—É
‚Ä¢ ”®–Ω—ñ–º —Å—É—Ä–µ—Ç—ñ–Ω –∂“Ø–∫—Ç–µ–ø, “õ“±—Ä–∞–º—ã–Ω —Ç–∞–ª–¥–∞—É
‚Ä¢ “Æ—à —Ç—ñ–ª–¥–µ –∂“±–º—ã—Å –∂–∞—Å–∞—É

**–ö–æ–º–∞–Ω–¥–∞–Ω–∞–º–ª–∞—Ä:**
/start - –ë–æ—Ç—Ç—ã “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—É
/language - –¢—ñ–ª –∞—É—ã—Å—Ç—ã—Ä—É
/help - –ö”©–º–µ–∫

**–ú—ã—Å–∞–ª–¥–∞—Ä:**
"–†–∞—Ö–∞—Ç –∫–æ–º–ø–∞–Ω–∏—è—Å—ã —Ö–∞–ª–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–∞—Ä –º–∞?"
"E621 “õ–æ—Å–ø–∞—Å—ã —Ö–∞–ª–∞–ª –º–∞?"
[”®–Ω—ñ–º —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä—É]

–ö–µ–∑ –∫–µ–ª–≥–µ–Ω —Å“±—Ä–∞“õ “õ–æ–π—ã“£—ã–∑!""",
            
            'ru': """‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–∞–ª—è–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ “ö–ú–î–ë —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ö–∞–ª—è–ª—å/—Ö–∞—Ä–∞–º –ø–∏—â–µ–≤—ã—Ö –¥–æ–±–∞–≤–æ–∫
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/help - –ü–æ–º–æ—â—å

**–ü—Ä–∏–º–µ—Ä—ã:**
"–ï—Å—Ç—å –ª–∏ —É –∫–æ–º–ø–∞–Ω–∏–∏ –†–∞—Ö–∞—Ç —Ö–∞–ª—è–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?"
"–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–∫–∞ E621 —Ö–∞–ª—è–ª—å?"
[–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞]

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!""",
            
            'en': """‚ÑπÔ∏è **Bot Information**

**Features:**
‚Ä¢ Check if organizations have “ö–ú–î–ë halal certificate
‚Ä¢ Determine halal/haram status of food additives
‚Ä¢ Upload product photos and analyze composition
‚Ä¢ Work in three languages

**Commands:**
/start - Restart bot
/language - Change language
/help - Help

**Examples:**
"Does Rakhat company have halal certificate?"
"Is E621 additive halal?"
[Send product photo]

Ask any questions!"""
        }
        return messages.get(language, messages['kk'])
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª—É"""
        user_id = update.effective_user.id
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username,
            'language': 'kk'  # ”ò–¥–µ–ø–∫—ñ —Ç—ñ–ª
        }
        
        # –°–µ—Å—Å–∏—è –∂–∞—Å–∞—É
        session = session_manager.get_session(user_id)
        session['user_info'] = user_info
        
        # OpenAI –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
        connection_test = await openai_client.test_connection()
        if not connection_test:
            await update.message.reply_text(
                "‚ùå OpenAI –±–∞–π–ª–∞–Ω—ã—Å—ã –∂–æ“õ. –ê–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.\n\n"
                "–¢–µ–∫—Å–µ—Ä—É –∫–µ—Ä–µ–∫:\n"
                "‚Ä¢ OPENAI_API_KEY\n"
                "‚Ä¢ OPENAI_ASSISTANT_ID\n"
                "‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã"
            )
            return
        
        # OpenAI thread –∂–∞—Å–∞—É
        if not session.get('thread_id'):
            thread_id = await openai_client.create_thread()
            if thread_id:
                session['thread_id'] = thread_id
        
        welcome_text = self.get_welcome_message(user_info['language'])
        await update.message.reply_text(welcome_text)
    
    async def language_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢—ñ–ª —Ç–∞“£–¥–∞—É –∫–æ–º–∞–Ω–¥–∞"""
        language_text = self.get_language_selection()
        await update.message.reply_text(language_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö”©–º–µ–∫ –∫–æ–º–∞–Ω–¥–∞"""
        user_id = update.effective_user.id
        session = session_manager.get_session(user_id)
        language = session['user_info'].get('language', 'kk')
        
        help_text = self.get_help_message(language)
        await update.message.reply_text(help_text)
    
    async def set_language(self, update: Update, context: ContextTypes.DEFAULT_TYPE, lang_code):
        """–¢—ñ–ª –æ—Ä–Ω–∞—Ç—É"""
        user_id = update.effective_user.id
        session = session_manager.get_session(user_id)
        session['user_info']['language'] = lang_code
        session_manager.update_session(user_id, user_info=session['user_info'])
        
        success_messages = {
            'kk': '‚úÖ –¢—ñ–ª “õ–∞–∑–∞“õ—à–∞ –æ—Ä–Ω–∞—Ç—ã–ª–¥—ã',
            'ru': '‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
            'en': '‚úÖ Language set to English'
        }
        
        await update.message.reply_text(success_messages.get(lang_code, success_messages['kk']))
        
        # –ñ–∞“£–∞ —Ç—ñ–ª–¥–µ “õ–æ—à –∫–µ–ª—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∫”©—Ä—Å–µ—Ç—É
        welcome_text = self.get_welcome_message(lang_code)
        await update.message.reply_text(welcome_text)
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú”ô—Ç—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω ”©“£–¥–µ—É"""
        user_id = update.effective_user.id
        session = session_manager.get_session(user_id)
        language = session['user_info'].get('language', 'kk')
        
        # Thread –±–æ–ª–º–∞—Å–∞ –∂–∞—Å–∞—É
        if not session.get('thread_id'):
            thread_id = await openai_client.create_thread()
            if thread_id:
                session['thread_id'] = thread_id
            else:
                await update.message.reply_text("–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")
                return
        
        user_message = update.message.text
        
        # –ñ–∞—É–∞–ø—Ç—ã –∫“Ø—Ç—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã
        waiting_messages = {
            'kk': '‚è≥',
            'ru': '‚è≥',
            'en': '‚è≥'
        }
        
        waiting_msg = await update.message.reply_text(waiting_messages.get(language, waiting_messages['kk']))
        
        # OpenAI-–¥–∞–Ω –∂–∞—É–∞–ø –∞–ª—É
        response = await openai_client.send_message(session['thread_id'], user_message)
        
        # –ö“Ø—Ç—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂–æ—é
        await waiting_msg.delete()
        
        # –ñ–∞—É–∞–ø—Ç—ã –∂—ñ–±–µ—Ä—É
        await update.message.reply_text(response)
        
        # –°–µ—Å—Å–∏—è–Ω—ã –∂–∞“£–∞—Ä—Ç—É
        session['conversation_history'].append({
            'timestamp': datetime.now(),
            'user_message': user_message,
            'bot_response': response
        })
    
    async def photo_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—É—Ä–µ—Ç —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω ”©“£–¥–µ—É"""
        user_id = update.effective_user.id
        session = session_manager.get_session(user_id)
        language = session['user_info'].get('language', 'kk')
        
        # Thread –±–æ–ª–º–∞—Å–∞ –∂–∞—Å–∞—É
        if not session.get('thread_id'):
            thread_id = await openai_client.create_thread()
            if thread_id:
                session['thread_id'] = thread_id
            else:
                error_messages = {
                    'kk': '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
                    'ru': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    'en': 'A technical error occurred. Please try again later.'
                }
                await update.message.reply_text(error_messages.get(language, error_messages['kk']))
                return
        
        try:
            # –°—É—Ä–µ—Ç—Ç—ñ –∂“Ø–∫—Ç–µ—É
            photo = update.message.photo[-1]  # –ï“£ “Ø–ª–∫–µ–Ω –∫”©–ª–µ–º–¥—ñ –∞–ª—É
            file = await context.bot.get_file(photo.file_id)
            file_bytes = await file.download_as_bytearray()
            
            # –°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É
            image_base64 = resize_image(file_bytes)
            if not image_base64:
                error_messages = {
                    'kk': '–°—É—Ä–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã “õ–æ–ª–¥–∞—É–º–µ–Ω –µ–º–µ—Å. JPG, PNG –Ω–µ–º–µ—Å–µ WEBP —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.',
                    'ru': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ WEBP.',
                    'en': 'Unsupported image format. Send in JPG, PNG or WEBP format.'
                }
                await update.message.reply_text(error_messages.get(language, error_messages['kk']))
                return
            
            # –•–∞–±–∞—Ä–ª–∞–º–∞ –¥–∞–π—ã–Ω–¥–∞—É
            caption = update.message.caption or ""
            formatted_message = f"–°—É—Ä–µ—Ç –±–æ–π—ã–Ω—à–∞ ”©–Ω—ñ–º “õ“±—Ä–∞–º—ã–Ω —Ç–∞–ª–¥–∞—É: {caption}".strip()
            
            # –ñ–∞—É–∞–ø—Ç—ã –∫“Ø—Ç—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã
            waiting_messages = {
                'kk': 'üì∏ –°—É—Ä–µ—Ç—Ç—ñ —Ç–∞–ª–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...',
                'ru': 'üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...',
                'en': 'üì∏ Analyzing image...'
            }
            
            waiting_msg = await update.message.reply_text(waiting_messages.get(language, waiting_messages['kk']))
            
            # OpenAI-–¥–∞–Ω –∂–∞—É–∞–ø –∞–ª—É
            response = await openai_client.send_message(
                session['thread_id'], 
                formatted_message, 
                image_base64=image_base64
            )
            
            # –ö“Ø—Ç—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂–æ—é
            await waiting_msg.delete()
            
            # –ñ–∞—É–∞–ø—Ç—ã –∂—ñ–±–µ—Ä—É
            await update.message.reply_text(response)
            
            # –°–µ—Å—Å–∏—è–Ω—ã –∂–∞“£–∞—Ä—Ç—É
            session['conversation_history'].append({
                'timestamp': datetime.now(),
                'user_message': f"[–°—É—Ä–µ—Ç] {caption}",
                'bot_response': response
            })
            
        except Exception as e:
            logger.error(f"–°—É—Ä–µ—Ç ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")
            error_messages = {
                'kk': '–°—É—Ä–µ—Ç—Ç—ñ ”©“£–¥–µ—É–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
                'ru': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                'en': 'Error processing image. Please try again.'
            }
            await update.message.reply_text(error_messages.get(language, error_messages['kk']))
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """“ö–∞—Ç–µ–ª–µ—Ä–¥—ñ ”©“£–¥–µ—É"""
        logger.error(f"Update {update} “õ–∞—Ç–µ–≥–µ —Å–µ–±–µ–ø –±–æ–ª–¥—ã: {context.error}")
    
    def run(self):
        """–ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É"""
        # Application –∂–∞—Å–∞—É
        self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # Handler-–ª–µ—Ä–¥—ñ “õ–æ—Å—É
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("language", self.language_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –¢—ñ–ª –æ—Ä–Ω–∞—Ç—É –∫–æ–º–∞–Ω–¥–∞–Ω–∞–º–∞—Ä—ã
        self.application.add_handler(CommandHandler("kk", lambda u, c: self.set_language(u, c, 'kk')))
        self.application.add_handler(CommandHandler("ru", lambda u, c: self.set_language(u, c, 'ru')))
        self.application.add_handler(CommandHandler("en", lambda u, c: self.set_language(u, c, 'en')))
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞ handler-–ª–µ—Ä—ñ
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.photo_handler))
        self.application.add_error_handler(self.error_handler)
        
        # –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
        print("üöÄ –•–∞–ª–∞–ª –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç AI –ë–æ—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–Ω—ã —Ç–µ–∫—Å–µ—Ä—É
    if not Config.validate_config():
        print("‚ùå –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–º–∞–¥—ã. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–Ω—ã –¥“±—Ä—ã—Å—Ç–∞“£—ã–∑.")
        exit(1)
    
    bot = HalalBot()
    bot.run()
